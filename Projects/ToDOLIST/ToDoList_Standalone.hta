<!DOCTYPE html>
<html>
<head>
    <title>Todo List</title>
    <hta:application
        applicationname="TodoList"
        id="TodoList"
        singleinstance="yes"
        sysmenu="yes"
        navigable="yes"
    />
<style>
      .invisible-text{
        display: none;
      }
</style>
    <style>
      body {
        background-image: url('E:/Users/Jarir Ahmed/OneDrive/Documents/VBS_Practice/Projects/ToDOLIST/images/background.jpeg'); /* Path to your background image */
        background-size: cover;
        background-repeat: no-repeat;
        background-attachment: fixed;
        font-family: Arial, sans-serif;
    }
    .my-button {
        background-color: #3498db; /* Default background color */
        color: #ffffff; /* Default text color */
        padding: 10px 20px;
        border: none;
        cursor: pointer;
    }

    .my-button:hover {
        background-color: #2980b9; /* Background color on hover */
    }

    .edit-button {
        background-color: #27ae60; /* Default background color for Edit button */
        color: #ffffff; /* Default text color for Edit button */
        padding: 5px 10px;
        border: none;
        cursor: pointer;
    }

    .edit-button:hover {
        background-color: #219653; /* Background color on hover for Edit button */
    }

    .delete-button {
        background-color: #e74c3c; /* Default background color for Delete button */
        color: #ffffff; /* Default text color for Delete button */
        padding: 5px 10px;
        border: none;
        cursor: pointer;
    }

    .delete-button:hover {
        background-color: #d63031; /* Background color on hover for Delete button */
    }
</style>

</head>
<body>
    <center><h1>Todo List (HTA)</h1>

    <div>
        <input type="text" id="taskInput" placeholder="Enter a task" />
        <button class="my-button" onclick="addTask()">Add</button>
    </div>

    <ul id="taskList"></ul>
    <div class="invisible-text">
    <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla vel turpis nec tortor blandit bibendum a sit amet quam. Integer tincidunt, dui in dignissim fringilla, ligula leo commodo libero, eget cursus justo ex in libero. Maecenas in dolor vel erat euismod vulputate vel in quam. Etiam nec tristique ligula, eu eleifend justo. Suspendisse viverra urna eget dui venenatis, ut egestas tortor pharetra. Fusce volutpat ex vel quam euismod bibendum. Quisque rhoncus bibendum vehicula. Duis nec <p>efficitur arcu, id aliquam elit. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Sed bibendum dolor sit amet ex vulputate euismod.
    <p>Suspendisse potenti. Nulla facilisi. Nunc lacinia quam at aliquam efficitur. Vivamus vitae</div>
    <script language="text/vbscript" src="vbs\prevent_source_stealing.vbs"></script>
    <script language="VBScript">

    Dim taskList
    Set taskList = CreateObject("Scripting.Dictionary")

    ' Load tasks from a file when the script starts
    LoadTasksFromFile

    Function getCurrentDateTime()
        Dim dt
        dt = Now
        getCurrentDateTime = FormatDateTime(dt, vbGeneralDate)
    End Function

    Sub LoadTasksFromFile()
        Dim objFSO, objFile
        Set objFSO = CreateObject("Scripting.FileSystemObject")

        ' Specify the path to the tasks file
        Dim filePath
        filePath = "E:\Users\Jarir Ahmed\OneDrive\Documents\VBS_Practice\Projects\ToDOLIST\tasks\tasks.txt" ' Change this to your desired file path

        If objFSO.FileExists(filePath) Then
            Set objFile = objFSO.OpenTextFile(filePath, 1, False)
            Do Until objFile.AtEndOfStream
                Dim taskLine
                taskLine = objFile.ReadLine
                ' Parse the task line to extract task and timestamp (e.g., "Task1 (Timestamp)")
                Dim task, timestamp
                task = Left(taskLine, InStr(taskLine, " (") - 1)
                timestamp = Mid(taskLine, InStr(taskLine, "(") + 2, Len(taskLine) - InStr(taskLine, "(") - 3)
                taskList(task) = CStr(timestamp) ' Convert timestamp to a string
            Loop
            objFile.Close
        End If
    End Sub

    Sub SaveTasksToFile()
        Dim objFSO, objFile
        Set objFSO = CreateObject("Scripting.FileSystemObject")

        ' Specify the path to the tasks file
        Dim filePath
        filePath = "E:\Users\Jarir Ahmed\OneDrive\Documents\VBS_Practice\Projects\ToDOLIST\tasks\tasks.txt" ' Change this to your desired file path

        Set objFile = objFSO.CreateTextFile(filePath, True)

        For Each task In taskList.Keys
            objFile.WriteLine task & " (" & taskList(task) & ")"
        Next

        objFile.Close
    End Sub

    Sub addTask()
        Dim task, listItem, taskDateTime
        task = Trim(document.getElementById("taskInput").value)

        If task = "" Then
            MsgBox "Please enter a task.", vbExclamation, "Error"
        Else
            taskDateTime = getCurrentDateTime()
            taskList(task) = FormatDateTime(taskDateTime, vbGeneralDate) ' Format date and time as a string
            document.getElementById("taskInput").value = ""
            refreshTaskList()
            SaveTasksToFile ' Save tasks after adding a new one
        End If
    End Sub

    Sub refreshTaskList()
        Dim tasks, task, taskDateTime, i
        tasks = ""
        i = 1

        For Each task In taskList.Keys
            taskDateTime = taskList(task)
            tasks = tasks & "<li>" & task & " (" & taskDateTime & ") <button class='edit-button' onclick='editTask(""" & task & """)'>Edit</button> <button class='delete-button' onclick='deleteTask(""" & task & """)'>Delete</button></li>"
            i = i + 1
        Next

        document.getElementById("taskList").innerHTML = tasks
    End Sub

    Sub editTask(task)
        Dim newTask, taskDateTime
        newTask = InputBox("Edit task:", "Edit Task", task)

        If newTask <> "" Then
            taskDateTime = getCurrentDateTime()
            taskList.Remove task
            taskList(CStr(newTask)) = taskDateTime ' Convert newTask to a string
            refreshTaskList()
            SaveTasksToFile ' Save tasks after editing
        End If
    End Sub

    Sub deleteTask(task)
        If MsgBox("Are you sure you want to delete this task?", vbQuestion + vbYesNo, "Delete Task") = vbYes Then
            taskList.Remove task
            refreshTaskList()
            SaveTasksToFile ' Save tasks after deleting
        End If
    End Sub

    refreshTaskList()
    </script>
    <script>
    // disable-right-click.js

    // Function to disable right-click
    function disableRightClick(event) {
        event = event || window.event; // Ensure event object exists
        if (event.preventDefault) {
            event.preventDefault();
        } else {
            event.returnValue = false; // For older versions of IE
        }

    }

    // Attach the contextmenu event listener to the document
    if (document.addEventListener) {
        document.addEventListener("contextmenu", disableRightClick);
    } else {
        document.attachEvent("oncontextmenu", disableRightClick); // For older versions of IE
    }

    </script>

</body>
</html>
